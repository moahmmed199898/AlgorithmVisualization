//bubble sort
async function test() {

    for (let i = 0; i < VA.lines.length - 1; i++) {
      for (let j = 0; j < VA.lines.length - i - 1; j++) {
        VA.changingLineIndex = j;
        if (VA.lines[j] > VA.lines[j + 1]) {
          VA.swap(j);
        }
        await VA.slowdown.wait();
        VA.update()
      }
    }
}
test();



//quick sort

let items = VA.lines;
async function swap(items, leftIndex, rightIndex){
    var temp = items[leftIndex];
    items[leftIndex] = items[rightIndex];
    items[rightIndex] = temp;
    await VA.slowdown.wait();
    VA.update();

}
async function partition(items, left, right) {
    var pivot   = items[Math.floor((right + left) / 2)], //middle element
        i       = left, //left pointer
        j       = right; //right pointer
    while (i <= j) {
        while (items[i] < pivot) {
            i++;
        }
        while (items[j] > pivot) {
            j--;
        }
        if (i <= j) {
            await swap(items, i, j); //sawpping two elements
            i++;
            j--;
        }
    }
    return i;
}

async function quickSort(items, left, right) {
    var index;
    if (items.length > 1) {
        index = await partition(items, left, right); //index returned from partition
        if (left < index - 1) { //more elements on the left side of the pivot
            quickSort(items, left, index - 1);
        }
        if (index < right) { //more elements on the right side of the pivot
            quickSort(items, index, right);
        }
    }
    return items;
}
// first call to quick sort
var sortedArray = quickSort(items, 0, items.length - 1);

