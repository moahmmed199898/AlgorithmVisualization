{"version":3,"sources":["columns/column/column.tsx","Store.ts","columns/columns.tsx","codeView/codeView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Column","className","style","height","this","props","React","Component","observable","Columns","observer","maxHeight","maxWidth","columns","Array","window","innerHeight","innerWidth","populateTheArray","prepTheColumns","widthOfLines","numberOfLines","i","number","Math","random","Store","array","push","forEach","el","index","randomNumber","key","CodeView","currentCode","clickEventHandler","bind","changeEventHandler","state","goToVisualizer","code","setState","to","mode","theme","onChange","fontSize","showPrintMargin","showGutter","highlightActiveLine","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","Button","variant","onClick","App","history","createBrowserHistory","path","exact","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uZAMqBA,G,uLAEb,OACI,yBAAKC,UAAU,SAASC,MAAO,CAACC,OAAOC,KAAKC,MAAMF,OAAO,Y,GAHjCG,IAAMC,Y,+BCA3B,M,wIAJVC,K,wEAA4B,M,kCAC5BA,K,wEAAyB,M,GCGTC,G,MADpBC,Y,cAKG,WAAYL,GAAmB,IAAD,8BAC1B,4CAAMA,KAJVM,eAG8B,IAF9BC,cAE8B,IAD9BC,QAAwB,IAAIC,MAGxB,EAAKH,UAAYI,OAAOC,YACxB,EAAKJ,SAAWG,OAAOE,WACvB,EAAKC,mBACL,EAAKC,iBALqB,E,gFAY1B,IAFA,IAAMC,EAA+B,IAAhBhB,KAAKQ,SACpBS,EAAgBjB,KAAKQ,SAASQ,EAC5BE,EAAI,EAAGA,EAAED,EAAcC,IAAK,CAChC,IAAIC,EAASC,KAAKC,UAAYrB,KAAKO,UAAY,GAAK,EACpDe,EAAMC,MAAMC,KAAKL,M,uCAIP,IAAD,OACbG,EAAMC,MAAME,SAAQ,SAACC,EAAGC,GACpB,IAAIC,EAAeR,KAAKC,UAAY,EAAKd,UAAY,GAAK,EAC1D,EAAKE,QAAQe,KAAK,kBAAC,EAAD,CAAQK,IAAKF,EAAO5B,OAAQ6B,U,+BAIlD,OACI,yBAAK/B,UAAU,WACVG,KAAKS,a,GA/BeP,IAAMC,a,oCCUtB2B,G,8BADpBxB,Y,cAGG,WAAYL,GAAW,IAAD,8BAClB,4CAAMA,KAFV8B,iBACsB,EAElB,EAAKA,YAAc,GACnB,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,mBAAqB,EAAKA,mBAAmBD,KAAxB,gBAC1B,EAAKE,MAAQ,CACTC,gBAAe,GAND,E,iFAUlBd,EAAMe,KAAOrC,KAAK+B,YAClB/B,KAAKsC,SAAS,CACVF,gBAAe,M,yCAIJC,GACfrC,KAAK+B,YAAcM,I,+BAEb,IACCD,EAAkBpC,KAAKmC,MAAvBC,eACP,OACI,yBAAKvC,UAAU,YACVuC,EAAgB,kBAAC,IAAD,CAAUG,GAAG,mBAA6B,KAC3D,kBAAC,IAAD,CACI1C,UAAU,MACV2C,KAAK,aACLC,MAAM,UACNC,SAAU1C,KAAKkC,mBACfS,SAAU,GACVC,iBAAiB,EACjBC,YAAY,EACZC,qBAAqB,EACrBC,2BAA2B,EAC3BC,0BAA2B,EAC3BC,gBAAiB,IAErB,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUtD,UAAU,aAAauD,QAASpD,KAAKgC,mBAA/D,uB,GAvCsB9B,IAAMC,a,GCPvBkD,G,YADpB/C,Y,cAGC,WAAYL,GAAa,IAAD,8BACtB,4CAAMA,KAFRqD,aACwB,EAEtB,EAAKA,QAAUC,cAFO,E,sEAMtB,OACE,yBAAK1D,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO2D,KAAK,IAAIC,OAAK,GACnB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,kBACV,kBAAC,EAAD,c,GAnBmBtD,IAAMC,a,GCGnBuD,QACW,cAA7B/C,OAAOgD,SAASC,UAEe,UAA7BjD,OAAOgD,SAASC,UAEhBjD,OAAOgD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.18a14ea4.chunk.js","sourcesContent":["import React, { Props } from \"react\";\r\nimport \"./style.scss\"\r\ninterface IColumn {\r\n    height:number;\r\n}\r\n\r\nexport default class Column extends React.Component<IColumn> {\r\n    render() {\r\n        return (\r\n            <div className=\"column\" style={{height:this.props.height+\"px\"}}></div>\r\n        )\r\n    }\r\n}","import {observable} from \"mobx\";\r\nclass Store {\r\n    @observable array:number[] = [];\r\n    @observable code:string = \"\";\r\n}\r\n\r\nexport default new Store();","import React, { Props } from \"react\";\r\nimport {observer} from \"mobx-react\";\r\nimport Column from \"./column/column\";\r\nimport Store from \"./../Store\";\r\nimport \"./style.scss\"\r\n@observer\r\nexport default class Columns extends React.Component<any, any> {\r\n    maxHeight:number;\r\n    maxWidth:number;\r\n    columns:JSX.Element[] = new Array<JSX.Element>();\r\n    constructor(props:Props<any>) {\r\n        super(props);\r\n        this.maxHeight = window.innerHeight;\r\n        this.maxWidth = window.innerWidth;\r\n        this.populateTheArray();\r\n        this.prepTheColumns();\r\n    }\r\n\r\n\r\n    populateTheArray() {\r\n        const widthOfLines = this.maxWidth * 0.01;\r\n        const numberOfLines = this.maxWidth/widthOfLines;\r\n        for(let i = 0; i<numberOfLines;i++) {\r\n            let number = Math.random() * (this.maxHeight - 1) + 1;\r\n            Store.array.push(number)\r\n        }\r\n    }\r\n\r\n    prepTheColumns() {\r\n        Store.array.forEach((el,index)=>{\r\n            let randomNumber = Math.random() * (this.maxHeight - 1) + 1;\r\n            this.columns.push(<Column key={index} height={randomNumber}></Column>)\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"columns\">\r\n                {this.columns}\r\n            </div>\r\n            );\r\n    }\r\n}","import React, { Props } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport Store from \"Store\";\r\nimport AceEditor from \"react-ace\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport \"ace-builds/src-noconflict/mode-javascript\";\r\nimport \"ace-builds/src-noconflict/theme-monokai\";\r\nimport \"ace-builds/src-noconflict/ext-language_tools\";\r\nimport \"ace-builds/src-noconflict/snippets/javascript\"\r\nimport \"./style.scss\"\r\n\r\ninterface IState{\r\n    goToVisualizer:boolean\r\n}\r\n@observer\r\nexport default class CodeView extends React.Component<{},IState,any>{\r\n    currentCode:string\r\n    constructor(props:any){\r\n        super(props);\r\n        this.currentCode = \"\";\r\n        this.clickEventHandler = this.clickEventHandler.bind(this);\r\n        this.changeEventHandler = this.changeEventHandler.bind(this);\r\n        this.state = {\r\n            goToVisualizer:false\r\n        }\r\n    }\r\n    clickEventHandler() {\r\n        Store.code = this.currentCode;\r\n        this.setState({\r\n            goToVisualizer:true\r\n        })\r\n        \r\n    }\r\n    changeEventHandler(code:string) {\r\n        this.currentCode = code;\r\n    }\r\n    render() {\r\n        const {goToVisualizer} = this.state;\r\n        return (\r\n            <div className=\"codeArea\">\r\n                {goToVisualizer? <Redirect to=\"/visualization\"></Redirect>:null}\r\n                <AceEditor\r\n                    className=\"ace\"\r\n                    mode=\"javascript\"\r\n                    theme=\"monokai\"\r\n                    onChange={this.changeEventHandler}\r\n                    fontSize={14}\r\n                    showPrintMargin={true}\r\n                    showGutter={true}\r\n                    highlightActiveLine={true}\r\n                    enableBasicAutocompletion={true}\r\n                    enableLiveAutocompletion= {true}\r\n                    enableSnippets= {true}\r\n                ></AceEditor>\r\n                <Button variant=\"primary\" className=\"submitCode\" onClick={this.clickEventHandler}>Visualize Code</Button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport { Switch, Route, BrowserRouter } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\"\nimport Columns from './columns/columns';\nimport CodeView from \"./codeView/codeView\";\nimport { observer } from 'mobx-react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./app.scss\"\n@observer\nexport default class App extends React.Component {\n  history: any;\n  constructor(props: any) {\n    super(props);\n    this.history = createBrowserHistory();\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <BrowserRouter>\n          <Switch>\n            <Route path=\"/\" exact>\n              <CodeView />\n            </Route>\n            <Route path=\"/codeView\">\n              <CodeView />\n            </Route>\n            <Route path=\"/visualization\">\n              <Columns />\n            </Route>\n          </Switch>\n        </BrowserRouter>\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}